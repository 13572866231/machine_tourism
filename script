reciepts <- read.csv("quarterly_receipts.csv")# Read in data
googletrends <- read.csv("google_trends.csv")
wordcloud <- read.csv("wordcloud.csv")
arrivals_nights <- read.csv("arrivals_nights.csv")

# convert to time series
quarterly_reciepts <- ts(reciepts$Tourism.receipts, start=c(2005, 1), end=c(2016, 4), frequency=4) 
tot_arrivals <- ts(arrivals_nights$Arrivals, start=c(2004,1), end=c(2016,12), frequency=12)
tot_nights <- ts(arrivals_nights$Nights, start=c(2004,1), end=c(2016,12), frequency=12)
time <- ts(arrivals_nights$time, start=c(2004,1), end=c(2016,12), frequency=12)
d1 <- ts(arrivals_nights$d1, start=c(2004,1), end=c(2016,12), frequency=12)
d2 <- ts(arrivals_nights$d2, start=c(2004,1), end=c(2016,12), frequency=12)
d3 <- ts(arrivals_nights$d3, start=c(2004,1), end=c(2016,12), frequency=12)

# Required packages
library(corrplot)
library(dplyr)
library(caret)
library(dygraphs)
library(wordcloud)
library(RColorBrewer)

#Set seed
seed <-777

#Wordcloud
pal <- brewer.pal(9, "Dark2")
wordcloud(words = wordcloud$Word, freq = wordcloud$Freq, min.freq = 1,
          , random.order=FALSE, rot.per=0.35, 
          colors=pal)

#Subset
tour.us.data  <- select(googletrends,contains("United.States"))
tour.ven.data <- select(googletrends,contains("Venezuela"))
tour.col.data <- select(googletrends,contains("Colombia"))
tour.ned.data <- select(googletrends,contains("Netherlands"))
tour.can.data <- select(googletrends,contains("Canada"))

# calculate and plot correlation matrix
corMat_tour.us.data <- cor(tour.us.data[, -1])
corMat_tour.ven.data <- cor(tour.ven.data[, -1])
corMat_tour.col.data <- cor(tour.col.data[, -1])
corMat_tour.ned.data <- cor(tour.ned.data[, -1])
corMat_tour.can.data <- cor(tour.can.data[, -1])

corrplot.mixed(corMat_tour.us.data,  order = "hclust", upper ="pie")
corrplot.mixed(corMat_tour.ven.data, order = "hclust", upper ="pie")
corrplot.mixed(corMat_tour.col.data, order = "hclust", upper ="pie")
corrplot.mixed(corMat_tour.ned.data, order = "hclust", upper ="pie")
corrplot.mixed(corMat_tour.can.data, order = "hclust", upper ="pie")

# Chow-Lin disaggregation
td <- td(quarterly_reciepts ~  tot_arrivals + tot_nights + time + d1 + d3,
         conversion = "sum", to = "monthly", method = "chow-lin-minrss-ecotrim")
reciepts_monthly <- predict(td)
summary(td)
plot(td)

graph_decomposition_fit <- dygraph(cbind(td$actual, td$fitted.values, main="Chow-Lin disaggregation fit"))%>%
        dyAxis("y", label = "In Afl. million")

graph_monthly_reciepts <- dygraph(reciepts_monthly, main="Chow-Lin disaggregation")%>%
        dyOptions(fillGraph = TRUE, fillAlpha = 0.4) %>%
        dyAxis("y", label = "In Afl. million") %>%
        dyOptions( fillGraph = TRUE, drawGrid = FALSE)

graph_decomposition_fit
graph_monthly_reciepts

reciepts_yoy <- diff(reciepts_monthly/ (lag(reciepts_monthly,12)))*100
dygraph(reciepts_yoy, main="Reciepts monthly growth")%>%
        dyAxis("y", label = "In percentage")%>% 
        dyRangeSelector()%>%
        dyShading(from = "2016-9-1", to = "2016-12-30")

reciepts_yoy

# not sure about these
#receipts_yoy <- diff(receipts_monthly/ (lag(receipts_monthly,12)))*100
#summary(receipts_yoy)
#dygraph(receipts_yoy, main="Tourism reciepts YOY growth")
#googletrends$receipts_monthly <- as.data.frame(receipts_monthly)       

#Set seed
set.seed(seed)

# Machine learning not working just yet
y<-receipts_yoy
x<-googletrends%>%
        select(-Month)
set.seed(seed)
fit<-randomForest(x,y, data=googletrends, ntree=2000)
fit
set.seed(seed)

par(mfrow=c(1,2))
plot(fit, main='')
varImpPlot(fit, main='')
par(mfrow=c(1,1))
pd<-cbind(ltg[,c("date","gdp")],fit$predicted)

rfplot<-ltc%>%
        select(-c(date))%>%
        zoo(ltc$date)%>%
        rollmean(12,align="right", fill=NA)%>%
        lapply(Delt,k=12)%>%
        lapply("*",100)%>%
        data.frame()%>%
        cbind(ltc$date)
names(rfplot)[21]<-"date"
rfpredx<-rfplot%>%
        filter(date>=as.Date("1997/12/1"))%>%
        select(-gdp)
rfpredy<-cbind(rfpredx$date,data.frame(predict(fit,rfpredx[,-20])))
names(rfpredy)<-c("date", "growth")
plot(rfpredy$date,rfpredy$growth, type="l", col=2, xlab="", ylab="GDP growth", main="Random Forests")
points(pd$date,pd$gdp)
rftrain<-rfpredy%>%
        filter(date<=as.Date("2010/12/1"))
rftest<-rfpredy%>%
        filter(date>as.Date("2010/12/1"))
tail(rftest)

# (don't remember where this is coming from)
#define the control using a random forest selection function with cross validation
#control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)

